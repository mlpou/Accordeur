import math

f = [[0,1/4],[3/7,2/5],[6/7,1/10],[9/7,3/20],[12/7,1/4],[15/7,1/20],[18/7,1/5],[3,1/4]]

def transfoDomaine(points) : #Entrée : liste 2D des points d'amplitude selon le temps
    borneInf = points[0][0]
    borneSup = points[len(points)-1][0]
    a = 2/(borneSup-borneInf)
    b = (borneInf+borneSup)/(borneInf-borneSup)
    pointsTransfo = []
    for i in points :
        list = [(i[0])*a+b, i[1]]
        pointsTransfo.append(list)
    pointsTransfo[0].append[a]
    return(pointsTransfo) # Sortie : liste 2D des points d'amplitude selon le temps, après changement de domaine


def sommeRiemannConst(List, const) :
    sum = 0
    for i in range(len(List)-1):
        multi = List[i][1]*const
        ecart = List[i+1][0] - List[i][0]
        sum += multi*ecart
    return(sum)

def trapezeConst(List, const):
    somme = List[0][1]*const*(List[1][0]-List[0][0]) + List[len(List)-1][1]*const*(List[len(List)-1][0]-List[len(List)-2][0])
    for i in range(1,len(List)-1):
        multi = List[i][1]*const
        ecart = List[i+1][0] - List[i][0]
        somme += 2*multi*ecart
    return(somme/2)


def sommeRiemannCos(List, degre) :
    sum = 0
    for i in range(len(List)-1):
        multi = List[i][1]*math.cos(List[i][0]*math.pi*degre)
        ecart = List[i+1][0] - List[i][0]
        sum += multi*ecart
    return(sum)

def trapezeCos(List, degre):
    somme = List[0][1]*(math.cos(List[0][0]*math.pi*degre))*(List[1][0]-List[0][0]) + List[len(List)-1][1]*(math.cos(List[len(List)-1][0]*math.pi*degre))*(List[len(List)-1][0]-List[len(List)-2][0])
    for i in range(1,len(List)-1):
        multi = List[i][1]*math.cos(List[i][0]*math.pi*degre)
        ecart = List[i+1][0] - List[i][0]
        somme += 2*multi*ecart
    return(somme/2)

def sommeRiemannSin(List, degre) :
    sum = 0
    for i in range(len(List)-1):
        multi = List[i][1]*math.sin(List[i][0]*math.pi*degre)
        ecart = List[i+1][0] - List[i][0]
        sum += multi*ecart
    return(sum)

def trapezeSin(List, degre):
    somme = List[0][1]*(math.sin(List[0][0]*math.pi*degre))*(List[1][0]-List[0][0]) + List[len(List)-1][1]*(math.sin(List[len(List)-1][0]*math.pi*degre))*(List[len(List)-1][0]-List[len(List)-2][0])
    for i in range(1,len(List)-1):
        multi = List[i][1]*math.sin(List[i][0]*math.pi*degre)
        ecart = List[i+1][0] - List[i][0]
        somme += 2*multi*ecart
    return(somme/2)


def coefficients (pointsTransfo, degre, precision) : #Entrée : liste sortant de la transfo de domaine, nombre de terme du polynome, écart entre chaque fréquence
    constante = 1/(2**(1/2))
    retour =[sommeRiemannConst(pointsTransfo, constante)]
    for i in range(1, degre+1) :
        retour.append(sommeRiemannCos(pointsTransfo, i*precision))
    for i in range(1, degre+1) :
        retour.append(sommeRiemannSin(pointsTransfo, i*precision))
    return(retour) # Retour : liste de tous les coefficients du polynomes trigonométriques


def coefficientsTrapeze(pointsTransfo, degre, precision) :
    constante = 1/(2**(1/2))
    retour =[trapezeConst(pointsTransfo, constante)]
    for i in range(1, degre+1) :
        retour.append(trapezeCos(pointsTransfo, i*precision))
    for i in range(1, degre+1) :
        retour.append(trapezeSin(pointsTransfo, i*precision))
    return(retour) # Retour : liste de tous les coefficients du polynomes trigonométriques

def listeSeparees(pointsTransfo) : 
    cos = pointsTransfo[1 : (len(pointsTransfo)+1)/2]
    sin = pointsTransfo[(len(pointsTransfo)+1)/2 :]
    return ([cos,sin])

def frequence(i, coef, precision) :
    return ((i+1)/2)*coef*precision
